// -*- C++ -*- generated by wxGlade 0.6.5 on Wed May 22 03:50:59 2013

#include "otherpanels.hpp"

/**
 * 各種ネットワーク設定用画面
 */
NetworkSettingPanel::NetworkSettingPanel(wxWindow* parent, const wxPoint& pos, const wxSize& size, long style):
     wxPanel(parent, ID_NetworkPanel, pos, size, wxTAB_TRAVERSAL) {

     // begin wxGlade: NetworkSettingPanel::NetworkSettingPanel
     panel_5 = new wxPanel(this, wxID_ANY);
     panel_4 = new wxPanel(this, wxID_ANY);
     panel_3 = new wxPanel(this, wxID_ANY);
     panel_2 = new wxPanel(this, wxID_ANY);
     panel_1 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxRAISED_BORDER|wxTAB_TRAVERSAL);
     panel_7 = new wxPanel(panel_1, wxID_ANY);
     panel_9 = new wxPanel(panel_7, wxID_ANY);
     panel_8 = new wxPanel(panel_7, wxID_ANY);
     panel_6 = new wxPanel(panel_1, wxID_ANY);
     proxyUseCheck = new wxCheckBox(panel_6, wxID_ANY, wxT("Proxyを使用する"));
     proxyCacheUseCheck = new wxCheckBox(panel_6, wxID_ANY, wxT("Proxy使用時にキャッシュを使用しない"));
     label_6 = new wxStaticText(panel_7, wxID_ANY, wxT("使用するProxyのアドレス"));
     label_7 = new wxStaticText(panel_7, wxID_ANY, wxT("ポート"));
     label_8 = new wxStaticText(panel_7, wxID_ANY, wxT("受信用"));
     recProxyAddrTC = new wxTextCtrl(panel_7, wxID_ANY, wxEmptyString);
     recProxyPortTC = new wxTextCtrl(panel_7, wxID_ANY, wxEmptyString);
     label_9 = new wxStaticText(panel_7, wxID_ANY, wxT("送信用"));
     sedProxyAddrTC = new wxTextCtrl(panel_7, wxID_ANY, wxEmptyString);
     sedProxyPortTC = new wxTextCtrl(panel_7, wxID_ANY, wxEmptyString);
     label_10 = new wxStaticText(panel_7, wxID_ANY, wxT("SSL（認証用）"));
     authSSLAddrTC = new wxTextCtrl(panel_7, wxID_ANY, wxEmptyString);
     authSSLPortTC = new wxTextCtrl(panel_7, wxID_ANY, wxEmptyString);
     label_11 = new wxStaticText(panel_7, wxID_ANY, wxT("Basic認証"));
     label_12 = new wxStaticText(panel_8, wxID_ANY, wxT("UserName:"));
     basicAuthUserNameTC = new wxTextCtrl(panel_8, wxID_ANY, wxEmptyString);
     label_13 = new wxStaticText(panel_9, wxID_ANY, wxT("Password:"));
     basicAuthPasswordTC = new wxTextCtrl(panel_9, wxID_ANY, wxEmptyString);
     label_4 = new wxStaticText(panel_2, wxID_ANY, wxT("受信タイムアウト（ミリ秒）"));
     receiveTimeoutTC = new wxTextCtrl(panel_2, wxID_ANY, wxT("30000"));
     label_5 = new wxStaticText(panel_3, wxID_ANY, wxT("接続タイムアウト（ミリ秒）"));
     connectTimeoutTC = new wxTextCtrl(panel_3, wxID_ANY, wxT("10000"));
     label_3 = new wxStaticText(panel_4, wxID_ANY, wxT("ボード一覧取得URL"));
     boardListURLTC = new wxTextCtrl(panel_4, wxID_ANY, wxT("http://menu.2ch.net/bbsmenu.html"));
     label_1 = new wxStaticText(panel_5, wxID_ANY, wxT("受信バッファサイズ（KB）"));
     receiveBufferSizeTC = new wxTextCtrl(panel_5, wxID_ANY, wxT("32"));
     label_2 = new wxStaticText(panel_5, wxID_ANY, wxT("最大接続数"));
     maxConnSC = new wxSpinCtrl(panel_5, wxID_ANY, wxT("3"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);

     set_properties();
     do_layout();
     // end wxGlade
}


void NetworkSettingPanel::set_properties() {
     // begin wxGlade: NetworkSettingPanel::set_properties
     // end wxGlade
}


void NetworkSettingPanel::do_layout() {

     // begin wxGlade: NetworkSettingPanel::do_layout
     wxBoxSizer* vbox = new wxBoxSizer(wxVERTICAL);
     wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
     wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
     wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
     wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
     wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
     wxGridSizer* grid_sizer_1 = new wxGridSizer(5, 3, 0, 0);
     wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
     wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
     wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
     sizer_6->Add(proxyUseCheck, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_6->Add(proxyCacheUseCheck, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     panel_6->SetSizer(sizer_6);
     sizer_4->Add(panel_6, 0, wxEXPAND, 0);
     grid_sizer_1->Add(20, 20, 0, wxEXPAND, 0);
     grid_sizer_1->Add(label_6, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(label_7, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(label_8, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(recProxyAddrTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(recProxyPortTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(label_9, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(sedProxyAddrTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(sedProxyPortTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(label_10, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(authSSLAddrTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(authSSLPortTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     grid_sizer_1->Add(label_11, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_7->Add(label_12, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_7->Add(basicAuthUserNameTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     panel_8->SetSizer(sizer_7);
     grid_sizer_1->Add(panel_8, 0, wxEXPAND, 0);
     sizer_8->Add(label_13, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_8->Add(basicAuthPasswordTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     panel_9->SetSizer(sizer_8);
     grid_sizer_1->Add(panel_9, 0, wxEXPAND, 0);
     panel_7->SetSizer(grid_sizer_1);
     sizer_4->Add(panel_7, 0, wxALL|wxEXPAND, 5);
     panel_1->SetSizer(sizer_4);
     vbox->Add(panel_1, 0, wxALL|wxEXPAND, 5);
     sizer_3->Add(label_4, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_3->Add(receiveTimeoutTC, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     panel_2->SetSizer(sizer_3);
     vbox->Add(panel_2, 0, wxEXPAND, 0);
     sizer_2->Add(label_5, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_2->Add(connectTimeoutTC, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     panel_3->SetSizer(sizer_2);
     vbox->Add(panel_3, 0, wxEXPAND, 0);
     sizer_1->Add(label_3, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_1->Add(boardListURLTC, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
     panel_4->SetSizer(sizer_1);
     vbox->Add(panel_4, 0, wxEXPAND, 0);
     sizer_5->Add(label_1, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_5->Add(receiveBufferSizeTC, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_5->Add(label_2, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     sizer_5->Add(maxConnSC, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     panel_5->SetSizer(sizer_5);
     vbox->Add(panel_5, 0, wxEXPAND, 0);
     SetSizer(vbox);
     vbox->Fit(this);
     // end wxGlade
}

BEGIN_EVENT_TABLE(PathSettingPanel, wxPanel)
   EVT_CHECKBOX(ID_BrowserCheck, PathSettingPanel::OnBrowserCheck)
   EVT_DIRPICKER_CHANGED(ID_DirPickerBrowser, PathSettingPanel::OnChangeDirPickerBrowser)
   EVT_DIRPICKER_CHANGED(ID_DirPickerBoardList, PathSettingPanel::OnChangeDirPickerBoardList)
   EVT_DIRPICKER_CHANGED(ID_DirPickerSkin, PathSettingPanel::OnChangeDirPickerSkin)
END_EVENT_TABLE()

/**
 * 各種パス設定用画面
 */
PathSettingPanel::PathSettingPanel(wxWindow* parent, const wxPoint& pos, const wxSize& size, long style):
wxPanel(parent, ID_PathSettingPanel, pos, size, wxTAB_TRAVERSAL) {

     // begin wxGlade: PathSettingPanel::PathSettingPanel
     browserCheck = new wxCheckBox(this, ID_BrowserCheck, wxT("ブラウザを指定する"));
     label_1 = new wxStaticText(this, wxID_ANY, wxT("ブラウザのパス"));
     browserPathTC = new wxTextCtrl(this, 
				    ID_BrowserPathTC, 
				    wxEmptyString, 
				    wxDefaultPosition, 
				    wxDefaultSize,
				    wxTE_READONLY);
     dirPicker1 = new wxDirPickerCtrl(this, ID_DirPickerBrowser);
     label_2 = new wxStaticText(this, wxID_ANY, wxT("ログとボード一覧のフォルダ（次回起動時から有効）"));
     boardListTC = new wxTextCtrl(this, 
				  ID_BoardListTC, 
				  wxEmptyString,
				  wxDefaultPosition, 
				  wxDefaultSize,
				  wxTE_READONLY);
     dirPicker2 = new wxDirPickerCtrl(this, ID_DirPickerBoardList);
     label_3 = new wxStaticText(this, wxID_ANY, wxT("スキンのフォルダ（次回起動時から有効）"));
     skinPathTC = new wxTextCtrl(this, 
			       ID_SkinPathTC, 
			       wxEmptyString,
			       wxDefaultPosition, 
			       wxDefaultSize,
			       wxTE_READONLY);
     dirPicker3 = new wxDirPickerCtrl(this, ID_DirPickerSkin);

     set_properties();
     do_layout();
     // end wxGlade
}


void PathSettingPanel::set_properties() {
     bool specifyBrowser = false;
     wxString browserPath, boardListPath, skinPath;
     JaneCloneUtil::GetJaneCloneProperties(wxT("SPECIFY_DEFAULT_BROWSER"), &specifyBrowser);
     JaneCloneUtil::GetJaneCloneProperties(wxT("DEFAULT_BROWSER_PATH"), &browserPath);
     JaneCloneUtil::GetJaneCloneProperties(wxT("DEFAULT_BOARDLIST_PATH"), &boardListPath);
     JaneCloneUtil::GetJaneCloneProperties(wxT("DEFAULT_SKINFILE_PATH"), &skinPath);
     browserCheck->SetValue(specifyBrowser);
     browserPathTC->SetValue(browserPath);
     boardListTC->SetValue(boardListPath);
     skinPathTC->SetValue(skinPath);
}


void PathSettingPanel::do_layout() {
    // begin wxGlade: PathSettingPanel::do_layout
    wxGridSizer* grid_sizer_1 = new wxGridSizer(7, 2, 0, 0);
    grid_sizer_1->Add(browserCheck, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    grid_sizer_1->Add(20, 20, 0, wxEXPAND, 0);
    grid_sizer_1->Add(label_1, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    grid_sizer_1->Add(20, 20, 0, wxEXPAND, 0);
    grid_sizer_1->Add(browserPathTC, 0, wxALL|wxEXPAND, 5);
    grid_sizer_1->Add(dirPicker1, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    grid_sizer_1->Add(label_2, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, 5);
    grid_sizer_1->Add(20, 20, 0, wxEXPAND, 0);
    grid_sizer_1->Add(boardListTC, 0, wxALL|wxEXPAND, 5);
    grid_sizer_1->Add(dirPicker2, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    grid_sizer_1->Add(label_3, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, 5);
    grid_sizer_1->Add(20, 20, 0, wxEXPAND, 0);
    grid_sizer_1->Add(skinPathTC, 0, wxALL|wxEXPAND, 5);
    grid_sizer_1->Add(dirPicker3, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    SetSizer(grid_sizer_1);
    grid_sizer_1->Fit(this);
    // end wxGlade
}

/**
 * 各種動作設定用画面
 */
BehaviorPanel::BehaviorPanel(wxWindow* parent, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, ID_BehaviorPanel, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: BehaviorPanel::BehaviorPanel
    panel_5 = new wxPanel(this, wxID_ANY);
    panel_4 = new wxPanel(this, wxID_ANY);
    panel_7 = new wxPanel(panel_4, wxID_ANY);
    panel_3 = new wxPanel(this, wxID_ANY);
    panel_6 = new wxPanel(panel_3, wxID_ANY);
    panel_2 = new wxPanel(this, wxID_ANY);
    sizer_3_staticbox = new wxStaticBox(panel_3, -1, wxT("スレ一覧"));
    sizer_5_staticbox = new wxStaticBox(panel_4, -1, wxT("スレ"));
    sizer_7_staticbox = new wxStaticBox(panel_5, -1, wxT("お気に入り"));
    sizer_2_staticbox = new wxStaticBox(panel_2, -1, wxT("板一覧"));
    openBNewTabCheck = new wxCheckBox(panel_2, ID_OpenBNewTabCheck, wxT("新しいタブで板を開く"));
    onlyOneCategoryCheck = new wxCheckBox(panel_2, ID_OnlyOneCategoryCheck, wxT("カテゴリを一つしか開かない"));
    openTNewTabCheck = new wxCheckBox(panel_6, ID_OpenTNewTabCheck, wxT("新しいタブでスレを開く"));
    const wxString threadNewTabCombo_choices[] = {
        wxT("常に最大化"),
        wxT("常に通常サイズ")
    };
    threadNewTabCombo = new wxComboBox(panel_6, ID_ThreadNewTabCombo, wxT(""), wxDefaultPosition, wxDefaultSize, 2, threadNewTabCombo_choices, wxCB_DROPDOWN|wxCB_READONLY);
    lastReadThreadPosCheck = new wxCheckBox(panel_3, ID_LastReadThreadPosCheck, wxT("最後に見たスレの位置にジャンプ"));
    const wxString threadJumpSettingRadio_choices[] = {
        wxT("見ていたところにジャンプする"),
        wxT("新着にジャンプする")
    };
    threadJumpSettingRadio = new wxRadioBox(panel_4, ID_ThreadJumpSetting, wxEmptyString, wxDefaultPosition, wxDefaultSize, 2, threadJumpSettingRadio_choices, 0, wxRA_SPECIFY_ROWS);
    redrawNewThreadCheck = new wxCheckBox(panel_4, ID_RedrawNewThreadCheck, wxT("新着チェック時に既得レスを描き直す"));
    label_1 = new wxStaticText(panel_7, wxID_ANY, wxT("既得スレの表示レス数"));
    const wxString showResponseCombo_choices[] = {
        wxT("全レス表示"),
        wxT("最新50レス"),
        wxT("最新100レス"),
        wxT("最新250レス"),
        wxT("最新500レス")
    };
    showResponseCombo = new wxComboBox(panel_7, ID_ShowResponseCombo, wxT(""), wxDefaultPosition, wxDefaultSize, 5, showResponseCombo_choices, wxCB_DROPDOWN|wxCB_READONLY);
    favoriteNewTabCheck = new wxCheckBox(panel_5, ID_FavoriteNewTabCheck, wxT("新しいタブで開く"));
    favoriteOnlyOneFolderCheck = new wxCheckBox(panel_5, ID_FavoriteOnlyOneFolder, wxT("フォルダを一つしか開かない"));

    set_properties();
    do_layout();
    // end wxGlade
}


void BehaviorPanel::set_properties()
{
    // begin wxGlade: BehaviorPanel::set_properties
    threadNewTabCombo->SetSelection(0);
    threadJumpSettingRadio->SetSelection(0);
    showResponseCombo->SetSelection(-1);
    // end wxGlade
}


void BehaviorPanel::do_layout()
{
    // begin wxGlade: BehaviorPanel::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_7 = new wxStaticBoxSizer(sizer_7_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_5 = new wxStaticBoxSizer(sizer_5_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_3 = new wxStaticBoxSizer(sizer_3_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_2 = new wxStaticBoxSizer(sizer_2_staticbox, wxVERTICAL);
    sizer_2->Add(openBNewTabCheck, 1, wxEXPAND, 0);
    sizer_2->Add(onlyOneCategoryCheck, 1, wxEXPAND, 0);
    panel_2->SetSizer(sizer_2);
    sizer_1->Add(panel_2, 0, wxEXPAND, 0);
    sizer_4->Add(openTNewTabCheck, 1, wxEXPAND, 0);
    sizer_4->Add(threadNewTabCombo, 1, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    panel_6->SetSizer(sizer_4);
    sizer_3->Add(panel_6, 1, wxEXPAND, 0);
    sizer_3->Add(lastReadThreadPosCheck, 0, wxALIGN_CENTER_VERTICAL, 0);
    panel_3->SetSizer(sizer_3);
    sizer_1->Add(panel_3, 0, wxEXPAND, 0);
    sizer_5->Add(threadJumpSettingRadio, 0, 0, 0);
    sizer_5->Add(redrawNewThreadCheck, 0, 0, 0);
    sizer_6->Add(label_1, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    sizer_6->Add(showResponseCombo, 1, 0, 0);
    panel_7->SetSizer(sizer_6);
    sizer_5->Add(panel_7, 1, wxEXPAND, 0);
    panel_4->SetSizer(sizer_5);
    sizer_1->Add(panel_4, 0, wxEXPAND, 0);
    sizer_7->Add(favoriteNewTabCheck, 0, 0, 0);
    sizer_7->Add(favoriteOnlyOneFolderCheck, 0, 0, 0);
    panel_5->SetSizer(sizer_7);
    sizer_1->Add(panel_5, 0, wxEXPAND, 0);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    // end wxGlade
}
