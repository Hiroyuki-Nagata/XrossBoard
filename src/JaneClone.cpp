// -*- C++ -*- generated by wxGlade 0.6.3 on Tue Nov 01 01:42:24 2011

#include "JaneClone.h"

using namespace std;

// enum
enum {
	ID_Quit = 1, ID_About, ID_GetBoardList, ID_GetVersionInfo, ID_AnyRightClick
};

// event table
BEGIN_EVENT_TABLE(JaneClone, wxFrame)

// メニューバーにあるコマンド入力で起動するメソッドのイベントテーブル
EVT_MENU(ID_Quit, JaneClone::OnQuit)
EVT_MENU(ID_About, JaneClone::OnAbout)
EVT_MENU(ID_GetBoardList, JaneClone::OnGetBoardList)
EVT_MENU(ID_GetVersionInfo, JaneClone::OnVersionInfo)

// ツリーコントロールのイベント
EVT_TREE_SEL_CHANGED(wxID_ANY, JaneClone::OnGetBoardInfo)

// 右クリックした際のイベント処理
EVT_CONTEXT_MENU(JaneClone::OnContext)
EVT_AUINOTEBOOK_TAB_RIGHT_DOWN(wxID_ANY, JaneClone::OnRightClick)

// 終了前処理
EVT_CLOSE(JaneClone::OnCloseWindow)

END_EVENT_TABLE()

JaneClone::JaneClone(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
	// アイコンの設定
	SetIcon(wxICON(wxicon));
	// メニューバーの設置
	wxMenuBar *menuBar = new wxMenuBar;
	wxMenu *menu1 = new wxMenu;
	menu1->Append(ID_About, wxT("このソフトについて..."));
	menu1->Append(ID_Quit, wxT("終了"));
	wxMenu *menu2 = new wxMenu;
	wxMenu *menu3 = new wxMenu;
	menu3->Append(ID_GetBoardList, wxT("板一覧更新"));
	wxMenu *menu4 = new wxMenu;
	wxMenu *menu5 = new wxMenu;
	wxMenu *menu6 = new wxMenu;
	wxMenu *menu7 = new wxMenu;
	wxMenu *menu8 = new wxMenu;
	wxMenu *menu9 = new wxMenu;
	menu9->Append(ID_GetVersionInfo, wxT("バージョン情報を開く"));
	menuBar->Append(menu1, wxT("ファイル"));
	menuBar->Append(menu2, wxT("表示"));
	menuBar->Append(menu3, wxT("板一覧"));
	menuBar->Append(menu4, wxT("スレッド一覧"));
	menuBar->Append(menu5, wxT("お気に入り"));
	menuBar->Append(menu6, wxT("検索"));
	menuBar->Append(menu7, wxT("ウィンドウ"));
	menuBar->Append(menu8, wxT("ツール"));
	menuBar->Append(menu9, wxT("ヘルプ"));

	SetMenuBar(menuBar);// メニューバー設置終わり

	// SetMinimumPaneSizeによってペインが合体しないように設定
	window_1 = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
	window_1->SetMinimumPaneSize(20);
	window_1_pane_2 = new wxPanel(window_1, wxID_ANY);
	window_1_pane_1 = new wxPanel(window_1, wxID_ANY);

	window_2 = new wxSplitterWindow(window_1_pane_2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
	window_2->SetMinimumPaneSize(20);

	//URL入力欄の表示部分
	label_1 = new wxStaticText(this, wxID_ANY, wxT("URL:"));
	textCtlForURL = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
	button_1 = new wxButton(this, wxID_ANY, wxT("GO"));

	//板一覧を取得してツリー表示
	m_tree_ctrl = new wxTreeCtrl(window_1_pane_1, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_DEFAULT_STYLE|wxSUNKEN_BORDER);
	window_2_pane_1 = new wxPanel(window_2, wxID_ANY);
	window_2_pane_2 = new wxPanel(window_2, wxID_ANY);

	// 呼ばれる順序はSetProperties　→　DoLayout
	SetProperties();
	DoLayout();
	this->CreateStatusBar();
	this->SetStatusText(wxT(" 完了"));
}

/**
 * SetProperties
 * 前回からのデータ引継ぎ等の処理を行う。
 *
 */
void JaneClone::SetProperties() {
	// wxGladeによる自動生成
	SetTitle(_("JaneClone"));
	SetSize(wxSize(960, 540));
	label_1->SetFont(
			wxFont(9, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));

	// 板一覧情報を反映する
	wxImageList *treeImage = new wxImageList(16, 16);
	wxBitmap idx1 = wxArtProvider::GetBitmap(wxART_FOLDER, wxART_OTHER);
	wxBitmap idx2 = wxArtProvider::GetBitmap(wxART_NEW, wxART_OTHER);
	treeImage->Add(idx1);
	treeImage->Add(idx2);
	m_tree_ctrl->AssignImageList(treeImage);

	// 板一覧情報のツリーコントロール
	m_treeData = new wxTreeItemData();
	m_rootId = m_tree_ctrl->AddRoot(wxT("2ch板一覧"), 0, 0, m_treeData);

	// カレントディレクトリを設定
	wxDir dir(wxGetCwd());
	// datフォルダ、propフォルダが存在するか確認。無ければ確認＆フォルダを作成
	if (!dir.Exists(wxT("./dat/"))) {
		wxMessageBox(wxT("datデータ保存用ディレクトリが見当たらないので作成します。\nフォルダ構成を確認してください。"));
		::wxMkdir(wxT("./dat/"));
	}
	if (!dir.Exists(wxT("./prop/"))) {
		wxMessageBox(wxT("設定ファイル保存用ディレクトリが見当たらないので作成します。\nフォルダ構成を確認してください。"));
		::wxMkdir(wxT("./prop/"));
	}
	// sqliteの初期化を行う
	SQLiteAccessor* sqliteAccessor = new SQLiteAccessor();
	sqliteAccessor->SetCommit();
	delete sqliteAccessor;

	// もしSQLite上に板一覧情報が存在するならば板一覧設定に飛ぶ
	if (SQLiteAccessor::TableHasInfo(wxT("BOARD_INFO"))) {
		SetBoardList();
	}
	// wxAuiNotebookに更新した
	boardNoteBook = new wxAuiNotebook(window_2_pane_1, wxID_ANY,
			wxDefaultPosition, wxDefaultSize, wxAUI_NB_DEFAULT_STYLE);
}

/**
 * DoLayout
 * ユーザーが触る前のアプリのレイアウトを設定する
 * 前回の起動時にレイアウトに変更があった場合はそれを反映する
 */

void JaneClone::DoLayout() {
	// 各種サイザー設定
	wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);

	// 一番上のURL入力欄など
	sizer_2->Add(label_1, 0, wxALL | wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL,
			0);
	sizer_2->Add(textCtlForURL, 2, wxALL | wxEXPAND, 0);
	sizer_2->Add(button_1, 0, 0, 0);
	sizer_1->Add(sizer_2, 0, wxALL | wxEXPAND, 2);

	// 下部のスプリットウィンドウの設定
	// Sizer3にツリーコントロールが入る
	sizer_3->Add(m_tree_ctrl, 1, wxEXPAND, 0);
	window_1_pane_1->SetSizer(sizer_3);

	// スプリットウィンドウ(横の区切り)
	window_2->SplitHorizontally(window_2_pane_1, window_2_pane_2);
	sizer_4->Add(window_2, 1, wxEXPAND, 0);
	window_1_pane_2->SetSizer(sizer_4);

	// スプリットウィンドウ(縦の区切り)
	window_1->SplitVertically(window_1_pane_1, window_1_pane_2);
	sizer_1->Add(window_1, 1, wxEXPAND, 0);
	SetSizer(sizer_1);

	// datフォルダ内にあるスレッド一覧の情報が入ったファイルとプロパティファイルを比べて
	// 右側のペインにスレッド一覧情報を反映する

	// 初期設定はこのLayout()が呼ばれる前に行わなくてはいけない
	Layout();
	// end wxGlade
}

void JaneClone::OnQuit(wxCommandEvent&) {

	// ツリーコントロールをデリートしてやらないとセグる
	delete m_tree_ctrl;
	Close(true);
}

void JaneClone::OnAbout(wxCommandEvent&) {
}

// 板一覧のツリーがクリックされたときに起きるイベント
void JaneClone::OnGetBoardInfo(wxTreeEvent& event) {
	// 選択されたTreeItemIdのインスタンス
	wxTreeItemId pushedTree = event.GetItem();

	// もし選択されたツリーが板名だったら(※TreeItemに子要素が無かったら)
	if (!m_tree_ctrl->ItemHasChildren(pushedTree)) {
		// 板名をwxStringで取得する
		wxString boardName = m_tree_ctrl->GetItemText(pushedTree);
		// URLを保持する文字列
		wxString boardURL;
		// 板名に対応したURLを取ってくる
		NameURLHash::iterator it;
		for (it = retainHash.begin(); it != retainHash.end(); ++it) {
			URLvsBoardName* hash = it->second;
			if (hash->BoardName.Cmp(boardName) == 0) {
				boardURL = hash->BoardURL;
				break;
			}
		}
		// 板一覧のツリーをクリックして、それをノートブックに反映するメソッド
		//SetBoardNameToNoteBook(boardName, boardURL);
	}
}

// 板一覧のツリーをクリックして、それをノートブックに反映するメソッド
/**
void JaneClone::SetBoardNameToNoteBook(wxString& boardName,
		wxString& boardURL) {
	// 戻り値は出力したgzipファイルの保存先
	wxString outputPath = DownloadThreadList(boardURL);
	// 出力先を指定してgzipファイルを解凍
	wxString inputDecommPath = outputPath;
	wxString outputDecommPath = outputPath;
	outputDecommPath.Replace(_T(".gzip"), _T(".tmp"));

	JaneClone::DecommpressFile(inputDecommPath, outputDecommPath);
	// 出力先を指定してSJISのファイルをエンコードしてUTF-8に変える
	wxString inputConvPath = outputDecommPath;
	wxString outputConvPath = outputDecommPath;
	outputConvPath.Replace(_T(".tmp"), _T(".dat"));
	JaneClone::ConvertSJISToUTF8(inputConvPath, outputConvPath);

	// 更新が終わったらgzipファイルとSJISファイルを消しておく
	if (wxFile::Exists(inputDecommPath) && wxFile::Exists(outputDecommPath)) {
		wxRemoveFile(inputDecommPath);
		wxRemoveFile(outputDecommPath);
	}
	// NoteWindow上にはwxListCtrlが乗る予定
	wxPanel *noteWindow = new wxPanel(boardNoteBook, wxID_ANY);
	wxBoxSizer* sizer_noteList = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_pane = new wxBoxSizer(wxVERTICAL);
	wxListCtrl* threadList = new wxListCtrl(noteWindow, wxID_ANY,
			wxDefaultPosition, wxDefaultSize, wxLC_REPORT);

	/** スレッド一覧画面用の材料を生成　*/
/**
	sizer_noteList->Add(threadList, 1, wxEXPAND, 0);
	noteWindow->SetSizer(sizer_noteList);
	boardNoteBook->AddPage(noteWindow, boardName);
	sizer_pane->Add(boardNoteBook, 1, wxEXPAND, 0);
	window_2_pane_1->SetSizer(sizer_pane);

	wxListItem itemCol;
	itemCol.SetText(wxT("番号"));
	threadList->InsertColumn(0, itemCol);
	itemCol.SetText(wxT("タイトル"));
	threadList->InsertColumn(1, itemCol);
	itemCol.SetText(wxT("レス"));
	threadList->InsertColumn(2, itemCol);
	itemCol.SetText(wxT("取得"));
	threadList->InsertColumn(3, itemCol);
	itemCol.SetText(wxT("新着"));
	threadList->InsertColumn(4, itemCol);
	itemCol.SetText(wxT("増レス"));
	threadList->InsertColumn(5, itemCol);
	itemCol.SetText(wxT("勢い"));
	threadList->InsertColumn(6, itemCol);
	itemCol.SetText(wxT("最終取得"));
	threadList->InsertColumn(7, itemCol);
	itemCol.SetText(wxT("since"));
	threadList->InsertColumn(8, itemCol);
	itemCol.SetText(wxT("板"));
	threadList->InsertColumn(9, itemCol);

	// データ挿入中に画面に描画すると遅くなるそうなので隠す
	threadList->Hide();

	// スレッド一覧画面を構成するデータを拾ってくる
	JaneClone::SetThreadList(outputConvPath);

	// スレッド一覧情報をリストから取ってくる
	ThreadListHash::iterator it;
	int i = 0;

	for (it = this->threadListHash.begin(); it != this->threadListHash.end();
			++it) {
		// スレッド一覧クラスの１レコード分を反映する
		ThreadList* hash = it->second;
		wxString buf;

		// 番号
		buf.Printf(wxT("%d"), i);
		long tmp = threadList->InsertItem(i, buf, 0);
		// スレタイ
		threadList->SetItem(tmp, 1, hash->title);
		// 最新のレス(スタブ)
		threadList->SetItem(tmp, 2,
				wxString::Format(wxT("%i"), hash->response));
		// 取得
		threadList->SetItem(tmp, 3,
				wxString::Format(wxT("%i"), hash->response));
		// 新着
		threadList->SetItem(tmp, 4, wxT("取得レス数"));
		// 増レス
		threadList->SetItem(tmp, 5, wxT("増レス数"));
		// 勢い
		threadList->SetItem(tmp, 6, wxT("新着レス数をここに入れる"));
		// 最終取得
		threadList->SetItem(tmp, 7, wxT("前回取得時と比べた増レス数をここに入れる"));
		// since
		threadList->SetItem(tmp, 8, wxT("計算した勢い値をここに入れる"));
		// 板名
		threadList->SetItem(tmp, 9, wxT("最終取得日を入れる"));

		// ループ変数のインクリメント
		i++;
	}
	// スレッドリストを表示させる
	threadList->Show();
}
**/

// スレッド一覧をファイルからロードしてハッシュマップにもたせる処理
void JaneClone::SetThreadList(wxString& inputThreadListDat) {

	// テキストファイルの読み込み
	wxTextFile datfile(inputThreadListDat);
	datfile.Open();

	// スレッド一覧読み込み用正規表現を準備する
	wxRegEx reThreadLine(_T("([[:digit:]]+).dat<>(.+)\\(([[:digit:]]{1,3})\\)"),
			wxRE_ADVANCED + wxRE_ICASE);
	// スレッドに番号をつける
	int loopNumber = 1;

	// テキストファイルの終端まで読み込む
	for (wxString line = datfile.GetFirstLine(); !datfile.Eof();
			line = datfile.GetNextLine()) {

		// スレッド一覧クラスを生成する
		ThreadList *threadList = new ThreadList();

		// 正規表現で情報を取得する
		if (reThreadLine.Matches(line)) {
			// キー値を取得する
			threadList->oid = reThreadLine.GetMatch(line, 1);
			// スレタイを取得する
			threadList->title = reThreadLine.GetMatch(line, 2);
			// レス数を取得する
			threadList->response = wxAtoi(reThreadLine.GetMatch(line, 3));
		}
		// 番号
		threadList->number = loopNumber;
		// Hashにスレッド情報を入れる
		this->threadListHash[loopNumber] = threadList;
		// ループ変数をインクリメント
		loopNumber++;
	}
}

/**
 * 板一覧更新処理
 */
void JaneClone::OnGetBoardList(wxCommandEvent&) {

	// ソケット通信を行う
	SocketCommunication* socketCommunication = new SocketCommunication();
	int rc = socketCommunication->DownloadBoardList(BOARD_LIST_PATH, BOARD_LIST_HEADER_PATH);
	delete socketCommunication;

	// 実行コード別のダイアログを出す
	if (rc != 0) {
		wxMessageBox(wxT("板一覧情報取得に失敗しました。ネットワークの接続状況を確認してください。"));
	} else {
		//ExtractBoardList* extractBoardList = new ExtractBoardList();
		//extractBoardList->
		// 板一覧情報をセットする
		JaneClone::SetBoardList();
	}
}

/**
 * SQLiteから板一覧情報を抽出してレイアウトに反映するメソッド
 */
void JaneClone::SetBoardList() {
}

// GUI上で右クリックされた際に起こるイベント処理
void JaneClone::OnContext(wxContextMenuEvent& event) {
	wxMessageBox(wxT("右クリックしましたねm9( ﾟдﾟ)"));
}

void JaneClone::OnRightClick(wxAuiNotebookEvent& event) {
	wxMessageBox(wxT("右クリックしましたねm9( ﾟдﾟ)"));
}

// バージョン情報が書かれたダイアログを表示する処理
void JaneClone::OnVersionInfo(wxCommandEvent&) {
	wxAboutDialogInfo info;
	info.SetName(wxT("Jane Clone - ２ちゃんねるビューア"));
	info.SetVersion(wxT("0.0.8"));
	info.SetDescription(wxT("Copyright(C) 2011 Nantonaku-Shiawase"));
	info.SetCopyright(wxT("http://d.hatena.ne.jp/panzer-jagdironscrap1/"));

	wxAboutBox(info);
}

// 終了前処理では、保存しておきたいユーザー設定をSQLiteに登録しておく
void JaneClone::OnCloseWindow(wxCloseEvent& event) {
	Destroy();
}
